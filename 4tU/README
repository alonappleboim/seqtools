This collection of scripts processes 3' RNA samples that were treated with 4tU. See
https://docs.google.com/document/d/1wRwfqTNBpY-mfdIrEmagks0KFttM6G-3Ho0GGaLZ8XA/edit?usp=sharing
for an execution tutorial.

Files:
  split_and_run_4tU.bash
    A convinience script that allows one to split the raw fastq files and send execution commands per sample
    to the SLURM cluster. THE MAIN ENTRY POINT OF THE PIPELINE.
  handle_4tU_sample.bash
    The main script executed per sample. Starts from an .olf sample file as generated by the split.bash script and
    performs all the sample-specific commands, including spike-in alignment, regular alignment, converted
    alignment, BAM and BIGIWIG generation, annotation counting, and statistics collection. 
  fit_truncated_binomial.py
    A python script that fits data from the read t/converted t 2D distribution to a truncated binomial
    distribution. Used by the handle_4tU_sample script
  rm_dups_with-hdr-seq.awk
    In the pipeline, when converting reads to the 3-letter genome, the original sequence is stored in the
    fastq header. This script removes duplicates while considering this altered header format.
  3p_rm_dups.awk
    An awk script that removes duplicated from 3' aligned reads
  fq2acg_fq.awk
    An awk script that converts reads to 3-letters, and organizes the read to contain the original sequence.
  merge_results.py
    The second MAIN ENTRY POINT of the pipeline. after all samples were handled, this python script merges 
    all statistics and counts to a single MATLAB struct. 
  split.bash
    Splits the raw fastq files into .olf files that are later processed by the sampl-specific handlers.
  run.bash
    This script generates and prints execution commands for all samples, its output can be passed to the 
    /cs/bd/tools/scripts/parallel_exec.bash script for parallel SLURM execution
  acg_sam2sam.awk
    This awk script converts a 3-letter SAM file to a regular SAM file (i.e. moves original sequence from
    header to sequence fields
  parse_tlg_sam.awk
    The main script that hanles the 4tU logic. After alignment to converted genome, this script loads the 
    actual genome and compares the original read sequence to the genomic sequence, whilst collecting various
    statistics and applying filters.
